'''leet code 924, hard'''

from typing import List


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        '''1306ms, 19.4Mb'''
        g = Graph(graph)
        marked = [False]*g.V
        size = [0]*g.V
        id = [0]*g.V
        count = 0

        def dfs(v):
            marked[v] = True
            size[count] += 1
            id[v] = count
            for w in g.adj[v]:
                if not marked[w]:  # !marked invalid syntax
                    dfs(w)

        for v in initial:
            if not marked[v]:
                dfs(v)
            count += 1

        sourceCount = [0]*g.V
        for v in initial:
            sourceCount[id[v]] += 1

        # print(id, size, sourceCount)
        res = math.inf
        for v in initial:
            if sourceCount[id[v]] == 1:
                if res == math.inf \
                or size[id[v]] > size[id[res]] \
                or (size[id[v]] == size[id[res]] and v < res):  # copy past == not >
                    res = v

        if res == math.inf:
            res = min(initial)

        return res
    

class Graph:
    def __init__(self, matrix):
        self.V = len(matrix)
        self.adj = []  # [[]] * self.V does not work, all the empty lists refer to the same obj
        for i in range(self.V):
            self.adj.append([])
        for v in range(self.V): # V not defined
            for w in range(v+1, self.V):
                if matrix[v][w] == 1:
                    ((self.adj)[v]).append(w)  # not append[w]
                    ((self.adj)[w]).append(v)
